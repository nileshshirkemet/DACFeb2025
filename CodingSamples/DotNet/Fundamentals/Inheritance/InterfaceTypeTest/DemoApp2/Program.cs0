using Taxation;

namespace DemoApp;

class Program
{
    //nested class can only refer to non-static members of outer class
    class Auditor
    {
        public Auditor()
        {
            Console.WriteLine("Auditor - acquiring required resources...");
        }

        public void Audit(string id, ITaxPayer payer)
        {
            Console.WriteLine($"Auditing {id}...");
            if(id.Length < 4)
                throw new ArgumentException("Invalid ID");
            decimal payment = payer.IncomeTax() + 150;
            Console.WriteLine($"Tax Payment: {payment:0.00}");
        }

        public void Dispose()
        {
            Console.WriteLine("Auditor - releasing acquired resources...");
        }
    }

    static void DoAuditing(string name, int count)
    {
        var a = new Auditor();
        if(count > 10)
            a.Audit(name, new Worker(count));
        else
            a.Audit(name, new Supervisor(count));
        a.Dispose();
    }

    static void Main(string[] args)
    {
        try
        {
            string m = args[0].ToUpper();
            int n = int.Parse(args[1]);
            DoAuditing(m, n);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
